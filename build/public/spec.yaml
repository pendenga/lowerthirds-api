openapi: 3.0.0
servers:
  - description: Lower Thirds API
    url: https://api.lower3.com/v1
info:
  description: Lower Thirds
  version: "1.0.0"
  title: Lower Thirds
  contact:
    email: pendenga@gmail.com
tags:
  - name: Meetings
    description: Details about individual meetings
  - name: Orgs
    description: Details about orgs
  - name: Items
    description: Details about orgs
  - name: Users
    description: Manage users
paths:
  /meetings:
    get:
      tags:
        - Meetings
      summary: List of meetings
      description: List of meetings
      operationId: getMeetings
      parameters:
        - $ref: "#/components/parameters/dateFrom"
        - $ref: "#/components/parameters/dateTo"
        - $ref: "#/components/parameters/page"
        - $ref: "#/components/parameters/pageSize"
      responses:
        '201':
          $ref: '#/components/responses/meetings'
        '400':
          description: 'invalid input, object invalid'
    post:
      tags:
        - Meetings
      summary: Creates a meeting
      description: Creates a meeting
      operationId: postMeetings
      responses:
        '201':
          description: meeting created
        '400':
          description: 'invalid input, meeting invalid'
        '409':
          description: an existing meeting already exists
      parameters: []
      requestBody:
        description: Meeting to add
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Meeting'
  /meetings/{MeetingID}:
    get:
      tags:
        - Meetings
      summary: Get meeting
      description: Get meeting
      operationId: getMeeting
      parameters:
        - $ref: "#/components/parameters/meetingId"
      responses:
        '200':
          $ref: '#/components/responses/meeting'
        '401':
          description: |
            You did not supply valid Authorization. The response will be empty.
        '404':
          description: The record doesn’t exist. The response will be empty.
    put:
      tags:
        - Meetings
      summary: Update an existing meeting
      description: Update an existing meeting
      operationId: updateMeeting
      parameters:
        - $ref: "#/components/parameters/meetingId"
      requestBody:
        description: Meeting object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Meeting'
      responses:
        '200':
          $ref: '#/components/responses/meeting'
        '401':
          description: |
            You did not supply valid Authorization. The response will be empty.
        '404':
          description: The record doesn’t exist. The response will be empty.
    delete:
      tags:
        - Meetings
      summary: Delete a meeting
      description: Delete a meeting
      operationId: deleteMeeting
      parameters:
        - $ref: "#/components/parameters/meetingId"
      responses:
        '200':
          description: The request was successful. The response will be empty.
        '401':
          description: You did not supply valid Authorization. The response will be empty.
        '404':
          description: The record doesn’t exist. The response will be empty.
  /meetings/{MeetingID}/items:
    get:
      tags:
        - Meetings
      summary: List of items for a meeting
      description: List of items for a meeting
      operationId: getMeetingItems
      parameters:
        - $ref: "#/components/parameters/meetingId"
        - $ref: "#/components/parameters/page"
        - $ref: "#/components/parameters/pageSize"
      responses:
        '201':
          $ref: '#/components/responses/items'
        '400':
          description: 'invalid input, object invalid'
  /orgs:
    get:
      tags:
        - Orgs
      summary: List of orgs
      description: List of orgs
      operationId: getOrgs
      parameters:
        - $ref: "#/components/parameters/page"
        - $ref: "#/components/parameters/pageSize"
      responses:
        '201':
          $ref: '#/components/responses/orgs'
        '400':
          description: 'invalid input, object invalid'
    post:
      tags:
        - Orgs
      summary: Creates an org
      description: Creates an org
      operationId: postOrgs
      responses:
        '201':
          description: org created
        '400':
          description: 'invalid input, org invalid'
        '409':
          description: an existing org already exists
      parameters: [ ]
      requestBody:
        description: Org to add
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Org'
  /orgs/{OrgID}:
    get:
      tags:
        - Orgs
      summary: Get org
      description: Get org
      operationId: getOrg
      parameters:
        - $ref: "#/components/parameters/orgId"
      responses:
        '200':
          $ref: '#/components/responses/org'
        '401':
          description: |
            You did not supply valid Authorization. The response will be empty.
        '404':
          description: The record doesn’t exist. The response will be empty.
    put:
      tags:
        - Orgs
      summary: Update an existing org
      description: Update an existing org
      operationId: updateOrg
      parameters:
        - $ref: "#/components/parameters/orgId"
      requestBody:
        description: Org object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Org'
      responses:
        '200':
          $ref: '#/components/responses/org'
        '401':
          description: |
            You did not supply valid Authorization. The response will be empty.
        '404':
          description: The record doesn’t exist. The response will be empty.
    delete:
      tags:
        - Orgs
      summary: Delete an org
      description: Delete an org
      operationId: deleteOrg
      parameters:
        - $ref: "#/components/parameters/orgId"
      responses:
        '200':
          description: The request was successful. The response will be empty.
        '401':
          description: |
            You did not supply valid Authorization. The response will be empty.
        '404':
          description: The record doesn’t exist. The response will be empty.
  /orgs/{OrgID}/meetings:
    get:
      tags:
        - Orgs
      summary: List of meetings for an org
      description: List of meetings for an org
      operationId: meetingsListByOrg
      parameters:
        - $ref: "#/components/parameters/orgId"
        - $ref: "#/components/parameters/dateFrom"
        - $ref: "#/components/parameters/dateTo"
        - $ref: "#/components/parameters/page"
        - $ref: "#/components/parameters/pageSize"
      responses:
        '201':
          $ref: '#/components/responses/meetings'
        '400':
          description: 'invalid input, object invalid'
  /orgs/{OrgID}/users:
    get:
      tags:
        - Orgs
      summary: List of users for an org
      description: List of users for an org
      operationId: usersListByOrg
      parameters:
        - $ref: "#/components/parameters/orgId"
        - $ref: "#/components/parameters/page"
        - $ref: "#/components/parameters/pageSize"
      responses:
        '201':
          $ref: '#/components/responses/users'
        '400':
          description: 'invalid input, object invalid'
  /orgusers:
    get:
      tags:
        - OrgUsers
      summary: Get organization-to-user map
      description: Returns a mapping of organization IDs to arrays of user IDs
      operationId: getOrgUsers
      responses:
        '200':
          description: A mapping of org IDs to arrays of user IDs
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: array
                  items:
                    type: string
        '401':
          description: Unauthorized
        '500':
          description: Server error
    post:
      tags:
        - OrgUsers
      summary: Assign user to organization
      description: Creates a mapping between a user and an organization
      operationId: postOrgUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [user_id, organization_id]
              properties:
                user_id:
                  type: string
                organization_id:
                  type: string
      responses:
        '204':
          description: Assignment successful
        '400':
          description: Invalid input
        '401':
          description: Unauthorized
        '500':
          description: Server error

    delete:
      tags:
        - OrgUsers
      summary: Unassign user from organization
      description: Deletes a mapping between a user and an organization
      operationId: deleteOrgUser
      parameters:
        - in: query
          name: user_id
          required: true
          schema:
            type: string
        - in: query
          name: organization_id
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Unassignment successful
        '400':
          description: Invalid input
        '401':
          description: Unauthorized
        '500':
          description: Server error
  /items:
    get:
      tags:
        - Items
      summary: List of items
      description: List of items
      operationId: getItems
      parameters:
        - $ref: "#/components/parameters/meetingId"
        - $ref: "#/components/parameters/orgId"
        - $ref: "#/components/parameters/dateFrom"
        - $ref: "#/components/parameters/dateTo"
        - $ref: "#/components/parameters/page"
        - $ref: "#/components/parameters/pageSize"
      responses:
        '201':
          $ref: '#/components/responses/items'
        '400':
          description: 'invalid input, object invalid'
    post:
      tags:
        - Items
      summary: Creates an item
      description: Creates an item
      operationId: postItem
      responses:
        '201':
          description: item created
        '400':
          description: 'invalid input, item invalid'
        '409':
          description: an existing item already exists
      parameters: []
      requestBody:
        description: Meeting to add
        content:
          application/json:
            schema:
              oneOf:
                - $ref: '#/components/schemas/BlankItem'
                - $ref: '#/components/schemas/LyricsItem'
                - $ref: '#/components/schemas/MessageItem'
                - $ref: '#/components/schemas/SpeakerItem'
                - $ref: '#/components/schemas/TimerItem'
  /items/{ItemID}:
    get:
      tags:
        - Items
      summary: Get item
      description: Get item
      operationId: getSlid
      parameters:
        - $ref: "#/components/parameters/itemId"
      responses:
        '200':
          $ref: '#/components/responses/item'
        '401':
          description: |
            You did not supply valid Authorization. The response will be empty.
        '404':
          description: The record doesn’t exist. The response will be empty.
    put:
      tags:
        - Items
      summary: Update an existing item
      description: Update an existing item
      operationId: updateItem
      parameters:
        - $ref: "#/components/parameters/itemId"
      requestBody:
        description: Item object
        content:
          application/json:
            schema:
              oneOf:
                - $ref: '#/components/schemas/BlankItem'
                - $ref: '#/components/schemas/LyricsItem'
                - $ref: '#/components/schemas/MessageItem'
                - $ref: '#/components/schemas/SpeakerItem'
                - $ref: '#/components/schemas/TimerItem'
      responses:
        '200':
          $ref: '#/components/responses/item'
        '401':
          description: |
            You did not supply valid Authorization. The response will be empty.
        '404':
          description: The record doesn’t exist. The response will be empty.
    delete:
      tags:
        - Items
      summary: Delete an item
      description: Delete an item
      operationId: deleteItem
      parameters:
        - $ref: "#/components/parameters/itemId"
      responses:
        '200':
          description: The request was successful. The response will be empty.
        '401':
          description: You did not supply valid Authorization. The response will be empty.
        '404':
          description: The record doesn’t exist. The response will be empty.
  /users:
    get:
      tags:
        - Users
      summary: Get all users
      description: Get all users
      operationId: getUsers
      parameters:
        - $ref: "#/components/parameters/page"
        - $ref: "#/components/parameters/pageSize"
      responses:
        '200':
          $ref: '#/components/responses/users'
        '401':
          description: |
            You did not supply valid Authorization. The response will be empty.
    post:
      tags:
        - Users
      summary: Add a new user
      description: Add a new user
      operationId: addUser
      parameters: []
      requestBody:
        description: User object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '201':
          $ref: '#/components/responses/user'
        '401':
          description: |
            You did not supply valid Authorization. The response will be empty.
  /users/{UserID}:
    get:
      tags:
        - Users
      summary: Get user
      description: Get user
      operationId: getUser
      parameters:
        - $ref: "#/components/parameters/userId"
      responses:
        '200':
          $ref: '#/components/responses/user'
        '401':
          description: |
            You did not supply valid Authorization. The response will be empty.
        '404':
          description: The record doesn’t exist. The response will be empty.
    put:
      tags:
        - Users
      summary: Update an existing user
      description: Update an existing user
      operationId: updateUser
      parameters:
        - $ref: "#/components/parameters/userId"
      requestBody:
        description: User object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          $ref: '#/components/responses/user'
        '401':
          description: |
            You did not supply valid Authorization. The response will be empty.
        '404':
          description: The record doesn’t exist. The response will be empty.
    delete:
      tags:
        - Users
      summary: Delete a User
      description: Delete a User
      operationId: deleteUser
      parameters:
        - $ref: "#/components/parameters/userId"
      responses:
        '200':
          description: The request was successful. The response will be empty.
        '401':
          description: You did not supply valid Authorization. The response will be empty.
        '404':
          description: The record doesn’t exist. The response will be empty.
  /users/{UserID}/meetings:
    get:
      tags:
        - Users
      summary: List of meetings for a user
      description: List of meetings for a user
      operationId: getUserMeetings
      parameters:
        - $ref: "#/components/parameters/userId"
        - $ref: "#/components/parameters/page"
        - $ref: "#/components/parameters/pageSize"
      responses:
        '201':
          $ref: '#/components/responses/meetings'
        '400':
          description: 'invalid input, object invalid'
  /users/{UserID}/orgs:
    get:
      tags:
        - Users
      summary: List of orgs for a user
      description: List of orgs for a user
      operationId: getUserOrgs
      parameters:
        - $ref: "#/components/parameters/userId"
        - $ref: "#/components/parameters/page"
        - $ref: "#/components/parameters/pageSize"
      responses:
        '201':
          $ref: '#/components/responses/orgs'
        '400':
          description: 'invalid input, object invalid'
    put:
      tags:
        - Users
      summary: Sets the list of orgs for a user
      description: Sets the list of orgs for a user
      operationId: setUserOrgs
      parameters:
        - $ref: "#/components/parameters/userId"
      requestBody:
        description: List of org IDs
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IDList'
      responses:
        '201':
          description: orgs set for user
        '400':
          description: 'invalid input, orgs invalid'
components:
  schemas:
    BlankItem:
      type: object
      description: Blank item definition
      required:
        - id
        - type
        - order
        - meeting_id
        - meeting_role
      properties:
        id:
          $ref: '#/components/schemas/ID'
        type:
          $ref: '#/components/schemas/ItemType'
        order:
          $ref: '#/components/schemas/Order'
        meeting_id:
          $ref: '#/components/schemas/ID'
        meeting_role:
          $ref: '#/components/schemas/MeetingRole'
    Date:
      type: string
      format: date-time
      example: 2025-08-29T09:12:33.001Z
    Duration:
      type: integer
      example: 5
    HymnID:
      type: string
      example: 5954ad1f70174bb0
    ID:
      type: string
      format: uuid
      example: 9c7b7971-5d35-4f32-8b5a-ffb93e8f6656
    IDList:
      type: array
      items:
        $ref: '#/components/schemas/ID'
      example: [7e0981a5-1159-4e4e-9057-c17817f442ee, 29755439-5bd6-4e17-ae67-156fb2441e34]
    Language:
      title: Language
      description: Language
      type: string
      enum:
        - eng
        - spa
    LyricsItem:
      type: object
      description: Lyrics item definition
      required:
        - id
        - type
        - order
        - meeting_role
        - hymn_id
      properties:
        id:
          $ref: '#/components/schemas/ID'
        type:
          $ref: '#/components/schemas/ItemType'
        order:
          $ref: '#/components/schemas/Order'
        meeting_role:
          $ref: '#/components/schemas/MeetingRole'
        hymn_id:
          $ref: '#/components/schemas/HymnID'
        show_translation:
          type: boolean
          default: false
    Meeting:
      type: object
      required:
        - org
        - meetingDate
      properties:
        id:
          $ref: '#/components/schemas/ID'
        org_id:
          $ref: '#/components/schemas/ID'
        conference:
          type: string
          example: Stake Conference
        meeting:
          type: string
          example: General Session
        date:
          $ref: '#/components/schemas/Date'
        duration:
          $ref: '#/components/schemas/Duration'
    MeetingRole:
      type: string
      example: Meeting intro
    Message:
      type: string
      example: The broadcast has concluded
    MessageItem:
      type: object
      description: Blank item definition
      required:
        - id
        - type
        - order
        - meeting_role
        - primary_text
      properties:
        id:
          $ref: '#/components/schemas/ID'
        type:
          $ref: '#/components/schemas/ItemType'
        order:
          $ref: '#/components/schemas/Order'
        meeting_role:
          $ref: '#/components/schemas/MeetingRole'
        primary_text:
          $ref: '#/components/schemas/Message'
        secondary_text:
          $ref: '#/components/schemas/Message'
    Name:
      type: string
      example: President Gregory Knight
    Order:
      type: integer
      example: 0
    Org:
      type: object
      required:
        - name
      properties:
        id:
          $ref: '#/components/schemas/ID'
        name:
          type: string
          example: Mesa Flatiron Stake
    ItemType:
      title: Item Type
      description: Item Type
      type: string
      enum:
        - blank
        - message
        - speaker
        - lyrics
        - timer
    SpeakerItem:
      type: object
      description: Speaker item definition
      required:
        - id
        - type
        - order
        - meeting_role
        - name
        - title
      properties:
        id:
          $ref: '#/components/schemas/ID'
        type:
          $ref: '#/components/schemas/ItemType'
        order:
          $ref: '#/components/schemas/Order'
        meeting_role:
          $ref: '#/components/schemas/MeetingRole'
        name:
          $ref: '#/components/schemas/Name'
        title:
          $ref: '#/components/schemas/Title'
    TimerItem:
      type: object
      description: Blank item definition
      required:
        - id
        - type
        - order
        - meeting_role
        - target_date
        - show_meeting_details
      properties:
        id:
          $ref: '#/components/schemas/ID'
        type:
          $ref: '#/components/schemas/ItemType'
        order:
          $ref: '#/components/schemas/Order'
        meeting_role:
          $ref: '#/components/schemas/MeetingRole'
        show_meeting_details:
          type: boolean
          default: false
    Title:
      type: string
      example: Stake President
    User:
      type: object
      description: User definition
      required:
        - id
        - email
        - full_name
        - connections
      properties:
        id:
          $ref: '#/components/schemas/UserID'
        email:
          type: string
          format: email
          example: pendenga@gmail.com
        first_name:
          type: string
          example: Grant
        full_name:
          type: string
          example: Grant Anderson
        last_name:
          type: string
          example: Anderson
    UserID:
      type: string
      example: 194bbf601ed54ef5
  parameters:
    dateFrom:
      in: query
      name: DateFrom
      description: pass an optional start date for filter
      required: false
      schema:
        type: string
        format: date
    dateTo:
      in: query
      name: DateTo
      description: pass an optional end date for filter
      required: false
      schema:
        type: string
        format: date
    hymnId:
      in: path
      name: HymnID
      description: Unique identifier for a hymn
      required: true
      schema:
        $ref: '#/components/schemas/HymnID'
    language:
      in: query
      name: Language
      description: pass an optional language filter
      required: false
      schema:
        $ref: '#/components/schemas/Language'
    meetingId:
      in: path
      name: MeetingID
      description: Unique identifier for a meeting
      required: true
      schema:
        $ref: '#/components/schemas/ID'
    orgId:
      in: path
      name: OrgID
      description: pass an optional org filter
      required: true
      schema:
        $ref: '#/components/schemas/ID'
    page:
      in: query
      name: Page
      description: The zero-indexed page number of results (see _limit_)
      schema:
        type: integer
        format: int32
        example: 0
        minimum: 0
        default: 0
    pageSize:
      in: query
      name: PageSize
      description: The maximum number of records to be returned
      schema:
        type: integer
        format: int32
        example: 10
        minimum: 0
        maximum: 1000
        default: 50
    itemId:
      in: path
      name: ItemID
      description: Unique identifier for an item
      required: true
      schema:
        $ref: '#/components/schemas/ID'
    userId:
      in: path
      name: UserID
      description: Unique identifier for a User
      required: true
      schema:
        $ref: '#/components/schemas/UserID'
  responses:
    blankItem:
      description: A single blank item
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/BlankItem'
    lyricsItem:
      description: A single lyrics item
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/LyricsItem'
    messageItem:
      description: A single message item
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/MessageItem'
    meeting:
      description: A single meeting
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Meeting'
    meetings:
      description: A list of meetings
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/Meeting'
    org:
      description: A single org
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Org'
    orgs:
      description: A list of orgs
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/Org'
    item:
      description: List of items
      content:
        application/json:
          schema:
            oneOf:
              - $ref: '#/components/schemas/BlankItem'
              - $ref: '#/components/schemas/LyricsItem'
              - $ref: '#/components/schemas/MessageItem'
              - $ref: '#/components/schemas/SpeakerItem'
              - $ref: '#/components/schemas/TimerItem'
            discriminator:
              propertyName: ItemType
              mapping:
                blank: '#/components/schemas/BlankItem'
                lyrics: '#/components/schemas/LyricsItem'
                message: '#/components/schemas/MessageItem'
                speaker: '#/components/schemas/SpeakerItem'
                timer: '#/components/schemas/TimerItem'
    items:
      description: List of items
      content:
        application/json:
          schema:
            type: array
            items:
              oneOf:
                - $ref: '#/components/schemas/BlankItem'
                - $ref: '#/components/schemas/LyricsItem'
                - $ref: '#/components/schemas/MessageItem'
                - $ref: '#/components/schemas/SpeakerItem'
                - $ref: '#/components/schemas/TimerItem'
            discriminator:
              propertyName: ItemType
              mapping:
                blank: '#/components/schemas/BlankItem'
                lyrics: '#/components/schemas/LyricsItem'
                message: '#/components/schemas/MessageItem'
                speaker: '#/components/schemas/SpeakerItem'
                timer: '#/components/schemas/TimerItem'
    speakerItem:
      description: A single speaker item
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SpeakerItem'
    timerItem:
      description: A single timer item
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/TimerItem'
    user:
      description: A single user
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/User'
    users:
      description: List of users
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/User'
